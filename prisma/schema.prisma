generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)

  accounts    Account[]
  quizzes     Quiz[]
  enrollments UserCourseEnrollment[]
  payments    Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Quiz {
  id        String   @id @default(cuid())
  userId    String
  dateTaken DateTime @default(now())
  quizData  Json

  user    User     @relation(fields: [userId], references: [id])
  courses Course[]
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String
  accessFee   Float
  quizId      String?

  quiz        Quiz?                  @relation(fields: [quizId], references: [id])
  enrollments UserCourseEnrollment[]
  contents    CourseContent[]
  // Payment     Payment[]
}

model UserCourseEnrollment {
  id             String   @id @default(cuid())
  userId         String
  courseId       String
  paymentId      String
  enrollmentDate DateTime @default(now())
  paymentStatus  String

  user    User    @relation(fields: [userId], references: [id])
  // payment Payment @relation(fields: [paymentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
}

model CourseContent {
  id          String @id @default(cuid())
  courseId    String
  contentType String
  contentData Json

  course Course @relation(fields: [courseId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  stripeId      String
  userId        String
  // courseId      String
  amount        String
  paymentDate   DateTime @default(now())
  paymentMethod String
  status        String

  user                 User                   @relation(fields: [userId], references: [id])
  // course               Course                 @relation(fields: [courseId], references: [id])
  // UserCourseEnrollment UserCourseEnrollment[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
