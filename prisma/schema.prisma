generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  ADMIN
  USER
}

enum ConnectionStatus {
  PENDING
  APPROVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)

  accounts Account[]
  Payment  Payment[]
  meter    Meter[]
  bills    Bills[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Payment {
  id            String   @id @default(cuid())
  stripeId      String
  userId        String
  billId        String
  amount        String
  paymentDate   DateTime @default(now())
  paymentMethod String
  status        String

  user User  @relation(fields: [userId], references: [id])
  bill Bills @relation(fields: [billId], references: [id])
}

model Meter {
  id     String           @id @default(cuid())
  userId String
  status ConnectionStatus

  user  User    @relation(fields: [userId], references: [id])
  Bills Bills[]
}

model Bills {
  id         String    @id @default(cuid())
  userId     String
  meterId    String
  month      Int
  year       Int
  units      Float
  billAmount Float
  dueDate    DateTime
  isPaid     Boolean   @default(false)
  payment    Payment[]

  user  User  @relation(fields: [userId], references: [id])
  meter Meter @relation(fields: [meterId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
